# ============================================================================
# # 파이썬에서 제공하는 기본 내장함수
# # 출력 함수(print)
# print()   # 줄바꿈 기능 & 출력
# print("안녕")


# # 길이 구하기 함수(len)
# length = len("python")
# print("python length:", length)
# print(len("python"))


# # 나눈 몫과 나머지 구하기(divmod)
# q, r = divmod(20, 3)   # 전달 인자값, 인수, argument
# print("몫:%d 나머지:%d" % (q, r))
# ============================================================================


# ============================================================================
# # 나만의 함수 만들기
# # 1.어떠한 기능을 하는 함수를 만들지 생각한다. 함수명 작성
# # 2.input 값으로 무엇을 받을 것인지 생각한다.
# # 3.output 값으로 무엇을 돌려줄 것인지 생각한다.
# # 4.구현한다.
# ============================================================================


# # 함수의 기본구조 def 함수명(매개변수)
# # 함수의 네가지 상태
# ============================================================================
# # 입력값, 출력값이 있는 가장 기본적인 함수 구조
# def num_plus(a, b):
#     result = a + b
#     return result   #result 없애고 a+b를 해도 무관

# plusvalue = num_plus(1,2)
# print(plusvalue)
# ============================================================================


# ============================================================================
# # 연습문제 01(입출력이 있는 함수)
# def mul (x, y) :
#     return x*y
# print(mul(2,3))
# ============================================================================


# ============================================================================
# # 연습문제 02(입출력이 있는 함수)
# # 정수 하나를 입력 받아 2제곱의 결과를 돌려주는 함수를 만들고 호출한 값을 출력하라.
# def squared(n):
#     result = n * n
#     return result

# number = int(input("정수를 입력하세요:"))
# result = squared(number)
# print("%d의 제곱은 %d이다." % (number, result))
# ============================================================================


# ============================================================================
# # 연습문제 03(입출력이 있는 함수)
# # 하나의 정수를 입력 받아 짝수면 True 홀수면 False을 돌려 주는 함수를 만드세요.
# def is_even(n):
#     if n % 2 == 0:
#         return True
#     else :
#         return False

# number = int(input("[홀짝 판별기]정수를 하나를 입력하세요(짝수 : True, 홀수 : False) : "))
# print(is_even(number))
# ============================================================================



# ============================================================================
# # 연습문제 04(원의 넓이)
# def circle_area(radius) :
#     result = radius**2 * 3.14
#     return result
# radius = float(input("반지름의 길이를 입력하세요. "))
# print(f"원의 넓이 : {circle_area(radius)}")
# ============================================================================


# ============================================================================
# # 1부터 n까지의 합계, 단, n의값은 100을 넘을수는 없다(break 활용)
# # ex) 1~10까지의 합 : 55, 1~100까지의 합 : 5050, 1~200까지의 합 : 5050
# def sum_limit_100(n):
#     sum = 0
#     for num in range(1, n + 1):  # 1 ~ n
#         if num > 100:
#             break
#             # return '오류'    
#         sum += num
#     return sum

# n = int(input("수를 입력하세요 :"))
# print(sum_limit_100(n))
# ============================================================================


# ============================================================================
# # 변수 text에 할당한 문자열의 단어 게수를 구하는 함수
# def w_count(text):
#     words = text.split()
#     return len(words)

# text = "To be, or Not to Be. That Is The Question"
# print("문자열의 단어 개수는 %d개 입니다." % w_count(text))
# ============================================================================


# ============================================================================
# # 입력값은 있지만 결과값이 없는 함수 구조 01
# def hello(name):
#     print(name, 'hello')
# print(hello("메가스터디"))
# ============================================================================


# ============================================================================
# # 입력값은 있지만 결과값이 없는 함수 구조 02
# def minus(x, y): 
#     result = x - y
#     print("%d에서 %d뺀 결과값은 %d입니다." % (x, y, result))

# a = int(input("첫번째 숫자를 입력하세요:"))
# b = int(input("두번째 숫자를 입력하세요:"))
# minus(a, b)
# ============================================================================


# ============================================================================
# # 입력값은 있지만 결과값이 없는 함수 구조 03
# # 두수를 받아서 몫과 나머지를 출력하는 함수를 만드세요.(리턴값이 없다.)
# def divide(n1, n2):   # parameter, 매개변수
#     q = n1 // n2
#     r = n1 % n2
#     print("몫: %d, 나머지: %d" % (q, r))

# number1 = int(input("나눗셈을 할 대상(정수 하나)를 입력하세요 : "))
# number2 = int(input("몇으로 나누실껀가요? : "))
# divide(number1, number2)

# # q, r = divmod(10, 3) 위 함수의 목적과 똑같은... 만들어져 있는 내장함수(리턴값이 있다.)
# ============================================================================


# ============================================================================
# # 입력값은 있지만 결과값이 없는 함수 구조 04
# # 영어 단어를 입력 받고 'a' 가 몇 개 들어 있는지 출력하세요.
# def word_count(word, char):
#     word_count = word.count(char)
#     print("%s의 개수는 %d개 입니다." % (char, word_count))

# eng_word = input("영어 단어를 하나 입력하세요:")
# word_count(eng_word, 'a')
# ============================================================================


# ============================================================================
# # 입력값은 있지만 결과값이 없는 함수 구조 05
# # 아래 사진은 오름차순 정렬 프로그램 코드이다. 
# # 해당 로직을 함수(func_up)로 변형하고, 오름차순으로 정렬하라
# lst = [93, 45, 21, 30, 20, 94, 66, 71, 45]
# #오름차순
# def func_up(lst) :
#     for a in range(0,len(lst)-1):
#         for b in range(a+1,len(lst)):
#             if lst[a] > lst[b]:
#                 (lst[a], lst[b]) = (lst[b], lst[a])
#                 tmp = lst[a]
#                 lst[a] = lst[b]
#                 lst[b] = tmp
# print(lst)
# func_up(lst)
# print(lst)
# ============================================================================


# ============================================================================
# # 입력값은 없지만 결과값이 있는 함수 구조
# def hello():
#     return 'hello'
# print(hello())
# # print(hello) #라고 했을때 hello의 값은 뭐지?
# ============================================================================

# # 연습문제2-2
# def hello() :
#     return 'hello python!'
# print(hello())

# ============================================================================
# # 입력값과 결과값이 모두 없는 함수 구조
# def hello():
#     print('hello')
# hello()
# ============================================================================

# # 연습문제2-1
# def hello() :
#     print('hello python!')
# hello()






# ============================================================================
# # 입력값이 몇개인지 모를때 & 여러개 받아야 하는 함수 구조 01 : *args
# def num_plus(*args) :
#     print(type(args), args)
#     result = 0
#     for i in args:
#         result += i
#     return result

# print("시작")
# result = num_plus(1, 2, 3, 4, 5)
# print(result)
# ============================================================================


# ============================================================================
# # 입력값이 몇개인지 모를때 & 여러개 받아야 하는 함수 구조 02 : *args
# # 4개의 값을 받아서 평균을 돌려주는 함수를 만들고 호출한 값을 출력하라.
# def get_average(s1, s2, s3, s4):
#     average = (s1 + s2 + s3 + s4) / 4
#     return average

# def get_average_many(*scores):
#     sum = 0
#     for score in scores:
#         sum += score
#     return sum / len(scores)

# s1, s2, s3, s4 = input("4개의 점수를 입력하세요:").split()
# s1 = int(s1)
# s2 = int(s2)
# s3 = int(s3)
# s4 = int(s4)
# result = get_average_many(1, 32, 51, 32, 20, 50, 60, 60)
# print("평균 : ", result)
# ============================================================================


# ============================================================================
# # 입력값이 몇개인지 모를때의 함수 구조 03
# def names_func (name, *names) :
#     print(name)
#     print(names)
# names_func('서울시', '강남구', '메가스터디', '4층', 'python')
# ============================================================================


# ============================================================================
# # 입력값이 몇개인지 모를때의 함수구조 04
# from statistics import mean, variance, stdev

# def statis_func (choice, *data) :
#     if (choice == 'avg') :
#         return mean(data)      #평균, mean
#     elif (choice == 'var') :
#         return variance(data)  #분산, variance
#     elif (choice == 'std') :
#         return stdev(data)     #표준편차, standard deviation
#     else :
#         return '오류, 재입력 요망'
    
# print('avg = ', statis_func('avg',1,2,3,4,5))
# print('var = ', statis_func('var',1,2,3,4,5))
# print('std = ', statis_func('std',1,2,3,4,5))
# ============================================================================


# ============================================================================
# # 연습문제 (선택적 함수 만들기)
# def cal(choice, num1, num2) :
#     if choice == '+' :
#         return num1 + num2
#     elif choice == '-' :
#         return num1 - num2
#     elif choice == '*' :
#         return num1 * num2
#     elif choice == '/':
#         return num1 / num2
#     else :
#         print("프로그램에 오류가 있어요 연산자를 다시 입력하세요")

# choice = input("어떤 연산을 하실껀가요? (+,-,*,/)\n")
# num1 = int(input("첫번째 정수를 입력하세요. "))
# num2 = int(input("두번째 정수를 입력하세요. "))
# result = cal(choice, num1, num2)
# print(f"{num1}과 {num2}의 {choice}연산 결과는 {result}입니다.")
# ============================================================================


# ============================================================================
# # 2개 이상의 리턴값이 있을경우(두수를 input값으로 전달하여 두수의 합,차,곱을 리턴해주는 함수라면...)
# def cal(a, b):
#     result1 = a + b
#     result2 = a - b
#     result3 = a * b
#     return result1, result2, result3
# result = cal(1,2)
# print(result)

# plus_result = result[0]
# print(plus_result)

# result1, result2, result3 = cal(1,2)
# print(result1)
# print(result2)
# print(result3)
# ============================================================================


# ============================================================================
# # 리턴값이 두개인 튜플관련 예제
# def sum_limit_100(n):
#     sum = 0
#     last_num = 0
#     for i in range(1, n + 1):
#         sum += i
#         last_num = i

#         if sum > 100:
#             break
#     return sum, last_num

# n = int(input("수를 입력하세요"))
# s, last_num = sum_limit_100(n)
# print("합은 %d이고 마지막으로 더해진 수는 %d이다." % (s, last_num))
# print("합은 %d이고 마지막으로 더해진 수는 %d이다." % sum_limit_100(n))
# ============================================================================


# ============================================================================
# # return의 또다른 용도(함수의 종료)
# def speak(msg) :
#     if msg == "종료" :
#         return
#         print("{msg}를 입력하셨습니다,")
#     else :
#         print(msg,"라고 입력하셨네요?")

# speak(input("메시지를 입력하세요 :"))
# ============================================================================


# ============================================================================
# # default값 미리 세팅하기
# def cal(a, b, test=True):
#     if(test) :
#         result = a + b
#         return result
#     else :
#         result1 = a + b
#         result2 = a * b
#         result3 = a // b
#         return result1, result2, result3

# result = cal(1,2)
# # result = cal(1,2, test=False)
# # result = cal(1,2, False)
# print(result)
# ============================================================================


# ============================================================================
# # 함수의 매개변수의 순서를 맞춰야 하는가? 안맞춰도 되는 방법은?
# def whoareyou(name, age, gender):
#     print("제 이름은 %s 이고 나이는 %d 살, 그리고 성별은 %s 입니다." %(name, age, gender))
# whoareyou(age=19, name='홍길동', gender= '남자')
# whoareyou(19,'홍길동',  '남자')
# ============================================================================


# ============================================================================
# # lamda 함수의 사용
# def add(a, b):
#     return a + b

# add = lambda a, b : a + b
# print(add(1,2))
# ============================================================================


# ============================================================================
# # lamda를 사용하는 이유. list같은 형태로 담는 등, 자유도가 높다.
# add_mul_List = [lambda a, b: a+b, lambda a, b : a*b]
# print(add_mul_List[0](1,2))
# print(add_mul_List[1](3,4))

# lst = []
# lst.append(add_mul_List[0](1,2))
# lst.append(add_mul_List[1](3,4))
# print(lst)
# ============================================================================


# ============================================================================
# # 지역변수와 전역변수 란 무엇인가
# # 지역변수의 예 : 함수안의 변수
# # 전역변수의 예 : 함수밖의 변수
# a = 2
# def sum(a):
#     a = a + 1
#     return a

# result = sum(a)
# print(result)
# print(a)
# ============================================================================


# ============================================================================
# # 아래 코드에서 result값은 어디에 정의 되어 있는가?
# # 함수 내에서 result를 선언하는 과정에서 정의되지 않은 result 값을 참조하는 상황이 발생
# result = 2
# def sum(a) :
#     # result = 1
#     result = result + a
#     return result
# sumvalue = sum(1)
# print(sumvalue)
# ============================================================================


# ============================================================================
# 위가 헷갈리는가? 이것과 같은 이치
# a = a+1
# print(a)
# ============================================================================


# ============================================================================
# # 새로운 지역변수 선언을 하는데 전역변수의 값을 가져와 사용하는것은 괜찮다.
# result = 2
# def sum(a) :
#     # result = 1
#     result_func = result + a
#     return result_func
# sumvalue = sum(1)
# print(sumvalue)
# ============================================================================


# ============================================================================
# # 함수안에서의 변수들은 함수가 호출이 끝나면 사라진다. 메모리 호출 구조를 보면 더 편하다
# # https://pythontutor.com/live.html#mode=edit 참고
# # 모든 변수는 메모리에 담긴다. 그러나 메모리의 어떤 영역에 담기느냐에 따라, 그 효력 범위가 달라진다.
# # 파이썬의 메모리 구조 참고 http://www.tcpschool.com/c/c_memory_structure
# ============================================================================


# ============================================================================
# # 전역 변수에 영향을 주고 담아두고 싶으면 아래 2가지 방법을 써야 한다.
# # 전역변수 a에 영향을 줄 수 있는 방법 01 
# # 전역변수 a에 다시 할당/초기화 한다.
# a = 2
# print(a)
# def sum(a):
#     a += 1
#     return a
# a = sum(a)
# print(a)
# ============================================================================


# ============================================================================
# # 전역변수 a에 영향을 줄 수 있는 방법 02 
# # global 키워드 선언
# result = 2
# def sum(a):
#     global result
#     result += a
#     # return result
# sumvalue = sum(1)
# print(sumvalue)
# print(result)
# ============================================================================


# ============================================================================
# # 그런데 특이한 자료 구조가 있다. list를 생각해보자.
# # 아래와 같은 자료구조의 특성을 보면 이해할 수 있다.
# # 함수도 메모리에 주소가 할당되어 저장되지만, 함수 내의 지역변수는 스택에 저장되어 휘발되도록 한다.
# # 그에 반해 list의 append는 object로서 heap 메모리라는 휘발되지 않는 공간에 변수값을 추가 하는 것므로 날아가지 않는다.
# b = (2,3,4)
# print("리스트 b의 id ", id(b))
# b = (1,2)
# def test(b):
#     b = (1,2)
# test(b)
# print("리스트 b는?", b)

# a=1
# print("a의 id ", id(a))
# a=2
# print("a의 id ", (id(a)))
# b = [2,3,4]
# print("리스트 b의 id ", id(b))
# def test(b):
#     b = b.append(1)
# test(b)
# print("리스트 b의 id ", id(b))
# print("리스트 b의 [2]의 id ", id(b[2]))
# print("리스트 b의 [1]의 id ", id(b[1]))
# print("함수 test의 id ", id(test))


#mutable immutable
#위에서 말한 일반적인 자료형들은 모두 함수를 통해서 전역변수를 변화 시킬수 없는 불변의 값이다. 즉  immutable 하다.
#그러나 리스트, 집합과 같은 자료형은 함수내에서도 특정 함수를 통해 해당 값을 변화시킬 수 있는, mutable한 자료형이 되는 것이다.



#연습문제4
#list의 index를 직접 구현, 그러나 리스트가 find를 자체 내장하고 있지 않기 때문에, 
#lst.find(6)의 형태로 사용불가.

# lst = [1, 4, 6]
# # print(lst.index(6))

# def find(self, any):
#     print(type(self), self)
#     a = 0
#     while a < len(self):
#         if any == self[a]:
#             return a
#         a += 1

# print(find(lst, 6))



# #연습문제5
# def starCount (layer) :
#     layer_count = 0
#     star_count = 0
    
#     while layer_count < layer :
#         layer_count += 1
#         print('*'*layer_count)
#         star_count += layer_count
        
#     return star_count

# layer = int(input('layer : '))
# print(f'별의 개수 : {starCount(layer)}') 




# # 연습문제 6 이전
# def count_num(x) :
#     if x == 0 :
#         return 0
#     else :
#         count_num(x-1)
#         print(x)

# print('x=5',  count_num(5))



# #연습문제6
# def factorial_func (x) :
#     if x == 1 :
#         print(x, end = ' ')
#         return 1
#     else :
#         result = x * factorial_func(x-1)
#         print(x, end = ' ')
#         return result
        
# result_factorial = factorial_func(4)
# print(f'팩토리얼 결과 : {result_factorial}') 




# help(len)
# import builtins
# import statistics

# # dataset = range(1,6)
# # print(max(dataset))
# # print(statistics.mean(dataset))
# print(dir(builtins))


#키워드 파라미터(키와 value를 받아 dic 형태로 값을 받는 방법)
# def dic(**kwargs) :
#     print(kwargs)
# dic(a=1, b='파이썬')


# list_num = [7,2,3,6]
# list_num.sort() #는 list.sort(list_num)와 같다.
# print(list_num)
# print(1+1) #은 print(int.__add__(1, 2)) 와 같다.


# list_num = ['1', '2', '3', '4']
# print(list_num.sort())     #output이 없는 함수
# print(list_num.count('1')) #output이 있는 함수